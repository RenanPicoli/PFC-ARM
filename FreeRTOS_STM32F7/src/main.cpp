/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2018-03-16

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f7xx.h"
/*
extern "C"{
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"
}

TaskHandle_t t1;
QueueHandle_t Global_Queue_Handle = 0;//@Pícoli
*/
#include "usb_device.h"

extern "C"{
	//para uso do HAL_Delay?
	void SysTick_Handler(void){
		HAL_IncTick();
		HAL_SYSTICK_IRQHandler();
	}

	//PCD_HandleTypeDef hpcd_USB_OTG_FS;
}

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */



/*static void sendToQueue( void *pvParameters )
{
	uint32_t delay=100;
	uint32_t temp;
	for( ;; )
	{
//		vTaskDelay(100);
		temp=ulTaskNotifyTake( pdTRUE, delay );
		if(temp!=0){
			delay=temp;
		}
		STM_EVAL_LEDToggle(LED3);
		xQueueSend(Global_Queue_Handle,&delay,100);

	}
}

static void receiveFromQueue( void *pvParameters )
{
	uint32_t delay=100;
	uint32_t temp;
	for( ;; )
	{
//		vTaskDelay(100);
		temp=ulTaskNotifyTake( pdTRUE, delay );
		if(temp!=0){
			delay=temp;
		}
		STM_EVAL_LEDToggle(LED6);
		xQueueReceive(Global_Queue_Handle,&temp,100);
	}
}*/


/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
//	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
//
//	/* GPIO led configuration */
//	GPIO_InitTypeDef GPIO_Init_Struct;
//	GPIO_Init_Struct.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
//	GPIO_Init_Struct.Mode=GPIO_MODE_OUTPUT_OD;
//	GPIO_Init_Struct.Speed = GPIO_SPEED_LOW;
//	GPIO_Init_Struct.Pull = GPIO_PULLUP;
//	HAL_GPIO_Init(GPIOC,&GPIO_Init_Struct);
//	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);

	RCC->AHB1ENR = RCC_AHB1ENR_GPIOCEN;
	//FIM da configuração do CLK do GPIO dos LEDs.

	SysTick_Config(SystemCoreClock / 1000);//SysTick é configurado para gerar 1 IRQ a cada 1 ms (para uso no HAL_Delay()

	GPIO_TypeDef* gpio_leds = GPIOC;
	gpio_leds->MODER = GPIO_MODER_MODER0_0|GPIO_MODER_MODER1_0|GPIO_MODER_MODER2_0;//configurando PC0,1,2 como general output
	gpio_leds->OTYPER= GPIO_OTYPER_OT_0|GPIO_OTYPER_OT_1|GPIO_OTYPER_OT_2;//open drain
	gpio_leds->PUPDR = 0x00000000;//sem pull-up, sem pull-down
	gpio_leds->OSPEEDR=0x00000000;//low speed
	gpio_leds->BSRR	 = GPIO_BSRR_BS_0 | GPIO_BSRR_BS_1 | GPIO_BSRR_BS_2;//apaga todos os leds
	gpio_leds->BSRR  = GPIO_BSRR_BR_0;//reseta PC0. Led vermelho acende
	//FIM da configuração de GPIO dos LEDs.
	//for(int i=0;i<0x3fffff;i++);
	HAL_Delay(500);

	//inicialização do USB
	gpio_leds->BSRR	 = GPIO_BSRR_BS_0 | GPIO_BSRR_BS_1 | GPIO_BSRR_BS_2;//apaga todos os leds
	gpio_leds->BSRR  = GPIO_BSRR_BR_1;//reseta PC1 (acende Led verde)
	MX_USB_DEVICE_Init();
	gpio_leds->BSRR	 = GPIO_BSRR_BS_0 | GPIO_BSRR_BS_1 | GPIO_BSRR_BS_2;//apaga todos os leds
	gpio_leds->BSRR  = GPIO_BSRR_BR_2;//reseta PC2 (acende Led azul)

	//STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);

	//Global_Queue_Handle = xQueueCreate(3,sizeof(int));

/*
	xTaskCreate( 	sendToQueue,			 The function that implements the task.
			( const char * ) "Tx", 		 Text name for the task, just to help debugging.
			configMINIMAL_STACK_SIZE, 		 The size (in words) of the stack that should be created for the task.
			NULL, 							 A parameter that can be passed into the task.  Not used in this simple demo.
			1,								 The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority.
			&t1 );

	xTaskCreate( 	receiveFromQueue,			 The function that implements the task.
			( const char * ) "Rx", 		 Text name for the task, just to help debugging.
			configMINIMAL_STACK_SIZE, 		 The size (in words) of the stack that should be created for the task.
			NULL, 							 A parameter that can be passed into the task.  Not used in this simple demo.
			1,								 The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority.
			&t1 );

	vTaskStartScheduler();
*/

	while (1);
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

/*
extern "C" void EXTI0_IRQHandler(){
	//EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
	//STM_EVAL_LEDToggle(LED4);
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	//xTaskNotifyFromISR(t1, 500, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
}

extern "C" void vApplicationTickHook( void ){
}

extern "C" void vApplicationMallocFailedHook( void ){
	for( ;; );
}

extern "C" void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName ){
	( void ) pcTaskName;
	( void ) pxTask;
	for( ;; );
}

extern "C" void vApplicationIdleHook( void ){
	volatile size_t xFreeStackSpace;
	xFreeStackSpace = xPortGetFreeHeapSize();
}
*/
